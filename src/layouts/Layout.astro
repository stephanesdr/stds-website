---
import { cn } from '@utils/cn';
import '../app.css'
import '../view-transitions.css'
import FooterComponent from "@components/layouts/FooterComponent";

import { getImage } from 'astro:assets'
import faviconSrc from '../images/favicon.png'
import faviconSvgSrc from '../images/favicon.svg'

const appleTouchIcon = await getImage({
  src: faviconSrc,
  width: 180,
  height: 180,
  format: 'png'
})
const faviconSvg = await getImage({ src: faviconSvgSrc, format: 'svg' })

interface Props {
	title: string;
}

enum HeaderType {
    "Projects" = "projects",
    "Project" = "project",
    "Home" = "home",
}

const links = [
	{ href: "/projects", label: "work" },
	{ href: "/cv", label: "CV" },
	{ href: "/about", label: "contact" },
];



const { title } = Astro.props;
const currentPath = Astro.url.pathname;

const pathname = new URL(Astro.request.url).pathname;
const activePath = pathname.slice(1); // remove the first "/"

const type = ((page) => {
	if (/^\/?projects$/g.test(page)) return HeaderType.Projects;
	if (/^\/?projects\/(.*?)/g.test(page)) return HeaderType.Project;
	return HeaderType.Home;

})(currentPath);

---

<!doctype html>
<html lang="fr">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Astro description" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" href="/favicon.ico" sizes="32x32" />
		<link rel="icon" href={faviconSvg.src} type="image/svg+xml" />
		<link rel="apple-touch-icon" href={appleTouchIcon.src} />
		<link rel="manifest" href="/manifest.json" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
		<script src="../../scripts/navigation.js"></script>
		
	</head>
	<body>
        <div id="wrapper" class="wrapper min-h-screen h-screen flex flex-col dark:bg-stone-800 dark:text-stone-300 dark:bg-blend-multiply">
			<header class="header w-full relative z-30"
				class:list={[
					{'header--type-projects': type == HeaderType.Projects},
					{'header--type-project': type == HeaderType.Project},
					{'header--type-home': type == HeaderType.Home}
				]}
			>
				<nav
					class="flex flex-row items-center flex-wrap justify-between gap-4 p-4 sm:py-4"
					class:list={[{boxed : type !== HeaderType.Project}]}>
					
					<div
						class="flex-1 will-change-transform with-transition"
						class:list={[{'-translate-x-[500px]': type == HeaderType.Project}]}
						data-transition-name="main-nav-logo"
					>

						<a href="/">
							<h1 class="font-sans uppercase text-base font-medium tracking-wide">Stephane Stadler</h1>
						</a>

					</div>
					<div class="flex-[3]"></div>
					<div
						class="flex-1 flex flex-row justify-end items-center gap-4 will-change-transform with-transition"
						class:list={[{'translate-x-[500px]': type == HeaderType.Project}]}
						data-transition-name="main-nav-links"
					>

					<a 	href="/projects" 
						class={cn(
							"font-sans text-sm font-medium tracking-wide uppercase",
							activePath === "projects" ? "underline underline-offset-4" : ""
						)}>
						WORK	
					</a>
					<a 	href="/cv" 
						class={cn(
							"font-sans text-sm font-medium tracking-wide uppercase",
							activePath === "cv" ? "underline underline-offset-4" : ""
						)}>
						CV	
					</a>
					<a 	href="/about" 
						class={cn(
							"font-sans text-sm font-medium tracking-wide uppercase",
							activePath === "about" ? "underline underline-offset-4" : ""
						)}>
						Contact	
					</a>
	
					</div>
				</nav>
			</header>

		
            <main class="flex-1 relative with-transition">
                <slot />
            </main>

            <FooterComponent client:only="react">
				<p class="text-sm font-normal">©2024 Stéphane Stadler </p>
			</FooterComponent>

        </div>
		
		<!-- <DebugButton client:only="react"> -->

	</body>
</html>




<style is:global>
   

</style>
